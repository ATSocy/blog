import addPublicationJsonLd from '@starter-kit/utils/seo/addPublicationJsonLd';
import { getAutogeneratedPublicationOG } from '@starter-kit/utils/social/og';
import request from 'graphql-request';
import Head from 'next/head';
import { useState } from 'react';
import { Container } from '../components/container';
import { AppProvider } from '../components/contexts/appContext';
import Footer from '../components/footer';
import Layout from '../components/layout';
import MinimalPosts from '../components/minimal-posts';
import PersonalHeader from '../components/personal-theme-header';
import {
	MorePostsByPublicationDocument,
	MorePostsByPublicationQuery,
	MorePostsByPublicationQueryVariables,
	Post,
	PostsByPublicationDocument,
	PostsByPublicationQuery,
	PostsByPublicationQueryVariables,
	Publication,
} from '../generated/graphql';

const GQL_ENDPOINT = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT;

type Props = {
	publication: Publication;
	initialPosts: Post[];
	initialPageInfo: PostsByPublicationQuery['publication']['posts']['pageInfo'];
};

export default function Index({ publication, initialPosts, initialPageInfo }: Props) {
	const [posts, setPosts] = useState<Post[]>(initialPosts);
	const [pageInfo, setPageInfo] = useState<Props['initialPageInfo']>(initialPageInfo);

	const loadMore = async () => {
		const data = await request<MorePostsByPublicationQuery, MorePostsByPublicationQueryVariables>(
			GQL_ENDPOINT,
			MorePostsByPublicationDocument,
			{
				first: 20,
				host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
				after: pageInfo.endCursor,
			},
		);
		const newPosts = data.publication.posts.edges.map((edge) => edge.node) as Post[];
		setPosts([...posts, ...newPosts]);
		setPageInfo(data.publication.posts.pageInfo);
	};
	return (
		<AppProvider publication={publication}>
			<Layout>
				<Head>
					<title>{publication.title}</title>
					<meta name="description" content={publication.descriptionSEO} />
					<meta
						property="og:image"
						content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
					/>
					<meta
						property="twitter:image"
						content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
					/>
					<script
						type="application/ld+json"
						dangerouslySetInnerHTML={{
							__html: JSON.stringify(addPublicationJsonLd(publication)),
						}}
					/>
				</Head>
				<Container className="mx-auto flex max-w-2xl flex-col items-stretch gap-10 px-5 py-10">
					<PersonalHeader />
					{posts.length > 0 && <MinimalPosts context="home" posts={posts} />}
					{pageInfo.hasNextPage && pageInfo.endCursor && (
						<button className="bg-white" onClick={loadMore}>
							Load more
						</button>
					)}
					<Footer />
				</Container>
			</Layout>
		</AppProvider>
	);
}

export const getStaticProps = async () => {
	const data = await request<PostsByPublicationQuery, PostsByPublicationQueryVariables>(
		GQL_ENDPOINT,
		PostsByPublicationDocument,
		{
			first: 20,
			host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
		},
	);
	const util = require('util');

	const publication = data.publication;
	const initialPosts = publication.posts.edges.map((edge) => edge.node);

	return {
		props: {
			publication,
			initialPosts,
			initialPageInfo: data.publication.posts.pageInfo,
		},
		revalidate: 1,
	};
};
